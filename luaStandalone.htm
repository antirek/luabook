<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>Lua 5.3 Справочное руководство</title>
<link rel="stylesheet" type="text/css" href="lua.css">
<meta http-equiv="content-type" content="text/html; charset=windows-1251">
</head>
<body>
<h1>7 – Автономный Lua</h1>
Хотя Lua был разработан как дополнительный язык, для встраивания в программы написанные на языке С, он зачастую используется как самостоятельный язык.
Интерпретатор для Lua как автономного языка, называется просто <tt>lua</tt> и включен в стандартный пакет поставки.
Автономный интерпретатор включает в себя все стандартные библиотеки, включая и библиотеку отладки.
Синтаксис использования таков:
<pre>lua [options] [script [args]]</pre>
Опции (<em>options</em>) могут быть следующими:
<div class="blockindent"><b><tt>-e <em>stat</em></tt> : </b> выполняет строку <em>stat</em>;<br>
<b><tt>-l <em>mod</em></tt> : </b> "запрашивает" <em>mod</em>;<br>
<b><tt>-i</tt> : </b> переходит в интерактивный режим после запуска <em>script</em>;<br>
<b><tt>-v</tt> : </b> выводит сведения о версии;<br>
<b><tt>-E</tt> : </b> игнорирует переменные окружения;<br>
<b><tt>--</tt> : </b> останавливает обработку опций;<br>
<b><tt>-</tt> : </b> выполняет <tt>stdin</tt> как файл и останавливает обработку опций.</div>
После обработки своих опций, <tt>lua</tt> запускает заданный <em>script</em>.
При вызове без аргументов, <tt>lua</tt> ведет себя как <tt>lua -v -i</tt>, когда стандартный ввод (<tt>stdin</tt>) является терминалом, и как <tt>lua -</tt> в остальных случаях.<br><br>
При вызове без опции <tt>-E</tt>, интерпретатор проверяет переменную среды <a name="pdf-LUA_INIT_5_3"><tt>LUA_INIT_5_3</tt></a>
(или <a name="pdf-LUA_INIT"><tt>LUA_INIT</tt></a>, если имя версии не определено) перед запуском любого аргумента.
Если содержимое переменной имеет формат <tt>@<em>filename</em></tt>, то <tt>lua</tt> выполняет этот файл. В противном случае, <tt>lua</tt> выполняет саму строку.<br><br>
При вызове с опцией <tt>-E</tt>, помимо игнорирования <tt>LUA_INIT</tt>, Lua также игнорирует значения <tt>LUA_PATH</tt> и <tt>LUA_CPATH</tt>, установку значений
<a href="standardLibraries.htm#pdf-package.path"><tt>package.path</tt></a> и <a href="standardLibraries.htm#pdf-package.cpath"><tt>package.cpath</tt></a> с путями по умолчанию, определенными в <tt>luaconf.h</tt>.<br><br>
Все опции обрабатываются по порядку, за исключением <tt>-i</tt> и <tt>-E</tt>.
Например, вызов вроде
<pre>$ lua -e'a=1' -e 'print(a)' script.lua</pre>
вначале установит переменную <tt>a</tt> равной 1, затем напечатает значение <tt>a</tt>, и наконец запустит файл <tt>script.lua</tt> без аргументов.
(Здесь символ <tt>$</tt> означает приглашение командной строки. Он может быть и другим.)<br><br>
Перед запуском любого кода, <tt>lua</tt> собирает все аргументы командной строки в глобальную таблицу, названную <tt>arg</tt>. Имя скрипта идет за индексом 0, первый аргумент после имени скрипта идет за индексом 1, и так далее.
Любые аргументы перед именем скрипта (то есть, имя интерпретатора плюс его опции) идут за отрицательными индексами. Например, в вызове
<pre>$ lua -la b.lua t1 t2</pre>
таблица вот такая:
<pre>arg = { [-2] = "lua", [-1] = "-la",
  [0] = "b.lua",
  [1] = "t1", [2] = "t2" }</pre>
Если в вызове нет скрипта, имя интерпретатора идет за индексом 0, за которым следуют другие аргументы. Например, вызов
<pre>$ lua -e "print(arg[1])"</pre>
напечатает "<tt>-e</tt>". Если скрипт имеется, он вызывается с параметрами
<tt>arg[1]</tt>, ···, <tt>arg[#arg]</tt>.
(Подобно всем блокам в Lua, скрипт компилируется как <i>vararg</i> функция, т.е. функция с переменным количеством аргументов.)<br><br>
В режиме взаимодействия, Lua неоднократно запрашивает и ожидает строку. После считывания строки, Lua вначале пытается интерпретировать её как выражение. Если это удается, он печатает его значение.
В противном случае, он интерпретирует строку как оператор. Если написан неполный оператор, интерпретатор ожидает его завершения выдачей другого запроса.<br><br>
В случае незащищенных ошибок в скрипте, интерпретатор сообщает об ошибке в стандартный поток ошибок.
Если объект ошибки не является строкой, но имеет метаметод <tt>__tostring</tt>, интерпретатор вызывает этот метаметод для получения заключительного сообщения.
В противном случае, интерпретатор конвертирует объект ошибки в строку и добавляет к ней отслеживание стека (stack traceback).<br><br>
При завершении, как правило, интерпретатор закрывает свое основное Lua состояние (смотрите <a href="api.htm#lua_close"><tt>lua_close</tt></a>).
Скрипт может избежать такого шага, вызвав для завершения функцию <a href="standardLibraries.htm#pdf-os.exit"><tt>os.exit</tt></a> to terminate.<br><br>
Чтобы разрешить использование Lua в качестве интерпретатора скриптов в системах Unix, автономный интерпретатор пропускает первую строку порции (chunk), если она начинается с символа <tt>#</tt>.
Таким образом, скрипты Lua могут быть превращены в исполняемые программы при помощи <tt>chmod +x</tt> и формы <tt>#!</tt>, как в
<pre>#!/usr/local/bin/lua</pre>
(Конечно, расположение интерпретатора Lua на вашей машине может быть и другим.
Если <tt>lua</tt> находится в глобальной переменной <tt>PATH</tt>, тогда
<pre>#!/usr/bin/env lua</pre>
является более портативным решением.)
<br><br>
</body></html>