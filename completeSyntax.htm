<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>Lua 5.3 —правочное руководство</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1251">
<link rel="stylesheet" type="text/css" href="lua.css">
<object id=hhctrl classid="clsid:ADB880A6-D8FF-11CF-9377-00AA003B7A11" width=0 height=0 vspace=0 hspace=0 border=0 type="application/x-oleobject"></object>
</head>
<body>
<h1>9 Ц ѕолный синтаксис Lua</h1>
«десь дан полный синтаксис Lua в <a href="https://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D1%81%D1%88%D0%B8%D1%80%D0%B5%D0%BD%D0%BD%D0%B0%D1%8F_%D1%84%D0%BE%D1%80%D0%BC%D0%B0_%D0%91%D1%8D%D0%BA%D1%83%D1%81%D0%B0_%E2%80%94_%D0%9D%D0%B0%D1%83%D1%80%D0%B0" target=_blank>расширенной форме Ѕэкуса Ч Ќаура (extended BNF)</a>.
 ак обычно в расширенной BNF, {A} означает ноль или более элементов A (повторение), а [A] означает дополнительный, необ€зательный элемент A.
(ќписание приоритета операторов смотрите в <a href="language.htm#3.4.8">І3.4.8</a>; а описание <a class=popupspot href="JavaScript:hhctrl.TextPopup('“ерминалы (терминальные символы) Ч это минимальные элементы грамматики, не имеющие собственной грамматической структуры.\r\n¬ расширенной BNF терминалы Ч это либо предопределЄнные идентификаторы (имена, считающиес€ заданными дл€ данного описани€ грамматики), либо цепочки Ч последовательности символов в кавычках или апострофах.','Arial,9',10,10,0xffffff,0xd69967)">терминалов</a> Name, Numeral, и LiteralString, смотрите <a href="language.htm#3.1">І3.1</a>.)
<pre>
	chunk ::= block

	block ::= {stat} [retstat]

	stat ::=  С<b>;</b>Т |
		 varlist С<b>=</b>Т explist |
		 functioncall |
		 label |
		 <b>break</b> |
		 <b>goto</b> Name |
		 <b>do</b> block <b>end</b> |
		 <b>while</b> exp <b>do</b> block <b>end</b> |
		 <b>repeat</b> block <b>until</b> exp |
		 <b>if</b> exp <b>then</b> block {<b>elseif</b> exp <b>then</b> block} [<b>else</b> block] <b>end</b> |
		 <b>for</b> Name С<b>=</b>Т exp С<b>,</b>Т exp [С<b>,</b>Т exp] <b>do</b> block <b>end</b> |
		 <b>for</b> namelist <b>in</b> explist <b>do</b> block <b>end</b> |
		 <b>function</b> funcname funcbody |
		 <b>local</b> <b>function</b> Name funcbody |
		 <b>local</b> namelist [С<b>=</b>Т explist]

	retstat ::= <b>return</b> [explist] [С<b>;</b>Т]

	label ::= С<b>::</b>Т Name С<b>::</b>Т

	funcname ::= Name {С<b>.</b>Т Name} [С<b>:</b>Т Name]

	varlist ::= var {С<b>,</b>Т var}

	var ::=  Name | prefixexp С<b>[</b>Т exp С<b>]</b>Т | prefixexp С<b>.</b>Т Name

	namelist ::= Name {С<b>,</b>Т Name}

	explist ::= exp {С<b>,</b>Т exp}

	exp ::=  <b>nil</b> | <b>false</b> | <b>true</b> | Numeral | LiteralString | С<b>...</b>Т | functiondef |
		 prefixexp | tableconstructor | exp binop exp | unop exp

	prefixexp ::= var | functioncall | С<b>(</b>Т exp С<b>)</b>Т

	functioncall ::=  prefixexp args | prefixexp С<b>:</b>Т Name args

	args ::=  С<b>(</b>Т [explist] С<b>)</b>Т | tableconstructor | LiteralString

	functiondef ::= <b>function</b> funcbody

	funcbody ::= С<b>(</b>Т [parlist] С<b>)</b>Т block <b>end</b>

	parlist ::= namelist [С<b>,</b>Т С<b>...</b>Т] | С<b>...</b>Т

	tableconstructor ::= С<b>{</b>Т [fieldlist] С<b>}</b>Т

	fieldlist ::= field {fieldsep field} [fieldsep]

	field ::= С<b>[</b>Т exp С<b>]</b>Т С<b>=</b>Т exp | Name С<b>=</b>Т exp | exp

	fieldsep ::= С<b>,</b>Т | С<b>;</b>Т

	binop ::=  С<b>+</b>Т | С<b>-</b>Т | С<b>*</b>Т | С<b>/</b>Т | С<b>//</b>Т | С<b>^</b>Т | С<b>%</b>Т |
		 С<b>&amp;</b>Т | С<b>~</b>Т | С<b>|</b>Т | С<b>&gt;&gt;</b>Т | С<b>&lt;&lt;</b>Т | С<b>..</b>Т |
		 С<b>&lt;</b>Т | С<b>&lt;=</b>Т | С<b>&gt;</b>Т | С<b>&gt;=</b>Т | С<b>==</b>Т | С<b>~=</b>Т |
		 <b>and</b> | <b>or</b>

	unop ::= С<b>-</b>Т | <b>not</b> | С<b>#</b>Т | С<b>~</b>Т

</pre>
<br><br>
</body></html>