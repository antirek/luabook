<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>Lua 5.3 Справочное руководство</title>
<link rel="stylesheet" type="text/css" href="lua.css">
<meta http-equiv="content-type" content="text/html; charset=windows-1251">
<object id=hhctrl classid="clsid:ADB880A6-D8FF-11CF-9377-00AA003B7A11" width=0 height=0 vspace=0 hspace=0 border=0 type="application/x-oleobject"></object>
</head>
<body>
<h1>8 – Несовместимость с предыдущей версией</h1>
Здесь приведены случаи несовместимости, которые можно найти при переводе программы из Lua&nbsp;5.2 в Lua&nbsp;5.3.
Некоторых видов несовместимости можно избежать компиляцией в Lua с соответствующими параметрами (смотрите файл <tt>luaconf.h</tt>).
Впрочем, в будущем, все эти варианты совместимости будут удалены.<br><br>
Версии Lua всегда могут изменять <span class="nowrap">C-ишный API</span> способами, которые не подразумевают изменений исходного кода в программе, таких как числовые значения констант или реализация функций как макросов.
Поэтому не следует предполагать, что бинарные файлы являются совместимыми в разных версиях Lua. При использовании новых версий, всегда перекомпилируйте программы, где применяется Lua API.<br><br>
Точно так же, Lua версии всегда могут изменить внутреннее представление предварительно скомпилированных блоков; в разных версиях Lua предварительно скомпилированные блоки несовместимы.<br><br>
Стандартные пути в официально распространяемом пакете могут изменяться в зависимости от версии.<br><br>
<h2>8.1 – <a name="8.1">Изменения в языке</a></h2>
<ul><li>Основная разница между Lua&nbsp;5.2 и Lua&nbsp;5.3 заключается во введении целочисленного подтипа для чисел.
Хотя это изменение не должно влиять на "обычные" вычисления, некоторые расчеты (в основном те, где предполагается некоторое переполнение) могут давать разные результаты.
Эти различия можно исправить, переводом числа в значение с плавающей запятой (в Lua&nbsp;5.2 все числа были с плавающей запятой), в частности написанием констант с окончанием <tt>.0</tt> или использования <tt>x = x + 0.0</tt> для конвертирования переменной.<br>
(Эта рекомендация только для быстрого исправления при случайной несовместимости; она не годится в качестве основного руководящего принципа для правильного программирования.
Для хорошего написания программ, там где требуются числа с плавающей запятой используйте числа с плавающей запятой, а целые числа используйте там, где нужны целые числа.)</li>
<li>Преобразование чисел с плавающей запятой в строки теперь добавляет к результату суффикс <tt>.0</tt>, если они выглядят как целые числа.
(Например, число с плавающей запятой 2.0 (в англоязычном варианте это называется число с плавающей точкой) будет напечатано как  <tt>2.0</tt>, а не как <tt>2</tt>.)
Следует всегда использовать явно заданный формат, когда нужен конкретный формат чисел.
(Формально говоря, это не является несовместимостью, так как Lua не указывает каким образом числа форматируются как строки, но некоторые программы предполагают определенный формат.)</li>
<li>Был удален <a class=popupspot href="JavaScript:hhctrl.TextPopup('Сборщик мусора в этом режиме разделяет все объекты на младшее и старшее поколения. При обычном запуске он будет просматривать только объекты младшего поколения, объекты же старшего поколения будут просматриваться значительно реже. Если объект из младшего поколения “выживает” при запуске сборщика мусора, он переходит в старшее поколение.','Arial,9',10,10,0xffffff,0xd69967)">"поколенческий" режим</a> (generational mode)
для <a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B1%D0%BE%D1%80%D0%BA%D0%B0_%D0%BC%D1%83%D1%81%D0%BE%D1%80%D0%B0_%28%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%29" target="_blank">сборщика мусора</a>.
(В Lua&nbsp;5.2 он был сделан в качестве эксперимента.)</li></ul>
<h2>8.2 – <a name="8.2">Изменения в библиотеках</a></h2>
<ul><li>Библиотека <tt>bit32</tt> устарела.
Теперь просто понадобится совместимая внешняя библиотека, или, еще лучше, замена её функций на соответствующие битовые операции.
(Имейте ввиду, что <tt>bit32</tt> оперирует 32-битными целыми числами, в то время как битовые операторы в Lua&nbsp;5.3 работают с целыми числами Lua, которые по умолчанию имеют 64&nbsp;бита.)</li>
<li>Библиотека таблиц в настоящее время учитывает метаметоды для установки и получения элементов.</li>
<li>Итератор <a href="standardLibraries.htm#pdf-ipairs"><tt>ipairs</tt></a> сейчас соблюдает метаметоды и её собственный метаметод <tt>__ipairs</tt> теперь устарел.</li>
<li>Имена опций в <a href="standardLibraries.htm#pdf-io.read"><tt>io.read</tt></a> больше не имеют начального символа '<tt>*</tt>'. Чтобы обеспечить совместимость, Lua продолжит принимать (и игнорировать) этот символ.</li>
<li>В математической библиотеке устарели следующие функции: <tt>atan2</tt>, <tt>cosh</tt>, <tt>sinh</tt>, <tt>tanh</tt>, <tt>pow</tt>, <tt>frexp</tt>, и <tt>ldexp</tt>.
Можно заменять <tt>math.pow(x,y)</tt> на <tt>x^y</tt>; можно заменять <tt>math.atan2</tt> на <tt>math.atan</tt>, которая теперь принимает один или два параметра; можно заменять <tt>math.ldexp(x,exp)</tt> на <tt>x * 2.0^exp</tt>.
Для других операций можно использовать либо внешнюю библиотеку, либо реализовать их в Lua.</li>
<li>Поисковик для загрузчиков C используемый функцией <a href="standardLibraries.htm#pdf-require"><tt>require</tt></a> изменил способ обработки имен версий.
Теперь, версия следует после имени модуля (как это принято в большинстве других инструментов).
Чтобы обеспечить совместимость, этот поисковик все еще пытается работать в старом формате, если не может найти открытую функцию в соответствии с новым стилем.
(Lua&nbsp;5.2 уже работал таким образом, но это было не документированное изменение.)</li>
<li>Вызов <tt>collectgarbage("count")</tt> теперь возвращает только один результат. (Второй результат можно вычислить из дробной части первого результата.)</li></ul>
<h2>8.3 – <a name="8.3">Изменения в API</a></h2>
<ul><li>Функции-продолжения теперь принимают в качестве параметров все что нужно было получать через <tt>lua_getctx</tt>, так что <tt>lua_getctx</tt> был удален. Соответственно адаптируйте свой код.</li>
<li>Функция <a href="api.htm#lua_dump"><tt>lua_dump</tt></a> теперь имеет дополнительный параметр, <tt>strip</tt>. Чтобы получить старое поведение, используйте 0 в качестве значения этого параметра.</li>
<li>Функции для inject/project беззнаковых целых чисел (<tt>lua_pushunsigned</tt>, <tt>lua_tounsigned</tt>, <tt>lua_tounsignedx</tt>, <tt>luaL_checkunsigned</tt>, <tt>luaL_optunsigned</tt>) устарели.
Используйте их знаковые эквиваленты с приведением типа.</li>
<li>Макросы для project целочисленных типов не по умолчанию (<tt>luaL_checkint</tt>, <tt>luaL_optint</tt>, <tt>luaL_checklong</tt>, <tt>luaL_optlong</tt>) устарели.
Используйте их эквивалент поверх <a href="api.htm#lua_Integer"><tt>lua_Integer</tt></a> с приведением типа (или, когда возможно, используйте в своем коде <a href="api.htm#lua_Integer"><tt>lua_Integer</tt></a>).</li></ul>
<br><br>
</body></html>